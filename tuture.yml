name: 从零开始用 Express + MongoDB 搭建图片分享社区
topics:
  - express
  - mongodb
  - docker
id: 69b697ed0cd9f890a636c9c78eb2ce0c
steps:
  - name: 初始化项目结构
    commit: f50be54
    diff:
      - file: .gitignore
      - file: package-lock.json
      - file: package.json
        display: true
        explain:
          pre: |-
            首先我们创建一个 npm 项目：

            ```bash
            $ npm init
            ```

            添加 express 的项目依赖：

            ```bash
            $ npm install express
            ```

            最终生成的 package.json 文件如下：
      - file: server.js
        display: true
        explain:
          pre: 然后编写服务器的入口文件 `server.js`，内容如下：
      - file: tuture.yml
    explain:
      post: >-
        通过 `node server.js` 运行 server.js 文件，然后在浏览器中访问
        [http://localhost:3000](http://localhost:3000)，便可以看到服务器的返回的 Hello World：
  - name: 配置中间件
    commit: f17c971
    diff:
      - file: package-lock.json
      - file: package.json
        display: false
      - file: server/configure.js
        display: true
        explain:
          pre: 创建 server 目录，在其中添加 configure.js 模块，用于配置所有的中间件：
          post: >-
            值得一提的是，除了上面提到的中间件，我们还用到了 express 自带的静态资源中间件
            `express.static`，用于向客户端发送图片、CSS等静态文件。最后，我们通过获取 `env`
            变量来判断是否处于开发环境，如果是的话就添加 `errorHandler` 以便于调试代码。
      - file: server.js
        display: true
        explain:
          pre: 在 server.js 中调用刚才用于配置中间件的代码：
      - file: tuture.yml
    explain:
      pre: >
        Express 本身是一个非常简洁的 web 框架，但是通过中间件这一设计模式，能够实现非常丰富的功能。一个 Express
        中间件本质上是一个函数：


        ```js

        function someMiddleware(req, res, next) {}

        ```


        `req` 参数是一个 `express.Request` 对象，封装了用户请求；`res` 参数则是一个 `express.Response`
        对象，封装了即将返回给用户的响应；`next` 则是在执行完所有逻辑后用于触发下一个中间件的函数。


        添加中间件的代码则非常简单：


        ```js

        app.use(middlewareA);

        app.use(middlewareB);

        app.use(middlewareC);

        ```


        中间件 A、B、C
        将会在处理每次请求时***按顺序执行***（这也意味着中间件的顺序是非常重要的）。接下来我们将添加以下基础中间件（也是几乎所有应用都会用到的中间件）：


        - `morgan`：用于记录日志的中间件，对于开发调试和生产监控都很有用；

        - `bodyParser`：用于解析客户端请求的中间件，包括 HTML 表单和 JSON 请求；

        - `methodOverride`：为老的浏览器提供 REST 请求的兼容性支持；

        - `cookieParser`：用于收发 cookie；

        - `errorHandler`：用于在发生错误时打印调用栈，***仅在开发时使用***；

        - `handlebars`：用于渲染用户界面的模板引擎，会在后面细讲。


        我们通过 npm 安装这些中间件：


        ```bash

        $ npm install express-handlebars body-parser cookie-parser morgan
        method-override errorhandler

        ```
  - name: 搭建路由和控制器
    commit: 5313abe
    diff:
      - file: controllers/home.js
        display: true
        explain:
          pre: 首先创建 controllers 目录，在其中创建 home.js 文件，并定义 `index` 控制器如下：
          post: >-
            每个控制器实际上都是一个 Express 中间件（只不过不需要 `next` 函数，因为是最后一个中间件）。这里我们暂时用
            `res.send` 发一条文字来代表这个 controller 已经实现。
      - file: controllers/image.js
        display: true
        explain:
          pre: 再在 controllers 目录下创建 image.js，实现与图片处理相关的控制器：
      - file: server/routes.js
        display: true
        explain:
          pre: 然后在 server 目录下创建路由模块 routes.js，建立从 URL 到控制器之间的映射：
          post: >-
            这里我们用到了 Express 自带的路由类 `Router`，可以很方便地定义路由，并且 `Router`
            本身也是一个中间件，可以直接通过 `app.use` 进行配置。
      - file: server/configure.js
        display: true
        explain:
          pre: 接着在 server/configure.js 模块中调用路由模块。
      - file: server.js
        display: true
        explain:
          pre: 最后我们去掉 server.js 中原来的首页路由。
      - file: tuture.yml
    explain:
      post: >-
        到了这一步，我们运行服务器，打开浏览器访问
        [http://localhost:3000](http://localhost:3000)，可以看到 `The home:index
        controller` 的信息；访问
        [http://localhost:3000/test123](http://localhost:3000/test123)，则是 `The
        image:index controller test123`。进一步，我们还可以通过 Postman 或者 curl 等工具测试 POST
        方法的 controller 是否可用。下面以 curl 为例测试 `POST /images`：


        ```bash

        $ curl -X POST localhost:3000/images

        The image:create POST controller

        ```


        一切顺利！到这里可以泡杯茶好好犒劳一下自己了~
      pre: >-
        现在我们已经配置好了基础的中间件，但是只有主页（URL 为 `/`）可以访问。接下来我们将实现以下路由：


        - `GET /`：网站主页

        - `GET /images/image_id`：展示单张图片

        - `POST /images`：上传图片

        - `POST /images/image_id/like`：点赞图片

        - `POST /images/image_id/comment`：评论图片


        虽然 Express 的项目结构没有固定的套路，但是我们将采用经典的 MVC 模式（即 Model View
        Controller）来搭建我们的项目。Model 定义了数据模型，View 定义了用户界面，而 Controller 则定义了相应的业务逻辑。
  - name: 配置 handlebars 模板引擎
    commit: d56de92
    diff:
      - file: views/layouts/main.handlebars
        display: true
        explain:
          pre: 首先完成布局模板 layouts/main.handlebars：
          post: >-
            main.handlebars 本身是一个完整的 HTML 文档，包括 `head` 和 `body` 部分。在 `head`
            部分，我们定义了网站的一些元数据，还加入了 Bootstrap 的 CDN 链接；在 `body`
            部分，包含两个容器：网站头部（header）和每个页面的自定义内容（即`{{{body}}}` ）。
      - file: views/index.handlebars
        display: true
        explain:
          pre: 接下来编写 index.handlebars，即主页内容。这里我们暂时先写上一个大标题：
      - file: views/image.handlebars
        display: true
        explain:
          pre: 还有 image.handlebars，即图片详情页面内容：
          post: >-
            index.handlebars 和 image.handlebars 的内容将替换布局模板中的 `{{{body}}}`
            部分。在用户访问某个页面时，页面内容 = ***布局模板+页面模板***。
      - file: controllers/home.js
        display: true
        explain:
          pre: 模板写好之后，我们修改控制器相应的代码，通过 `res.render` 函数渲染模板：
          post: '`render` 函数接受一个字符串参数，即页面模板的名称。例如 `index.handlebars` 的名称即为 `index`。'
      - file: controllers/image.js
        display: true
        explain:
          pre: 同样地，我们修改 image 控制器的代码：
      - file: server/configure.js
        display: true
        explain:
          pre: 最后，不要忘记在 server/configure.js 模块中配置 handlebars 中间件：
      - file: tuture.yml
    explain:
      pre: "这一步，我们将开始实现 MVC 中的 V，即 View，用户界面。尽管如今前后端分离已经是大势所趋，但是通过模板引擎在服务器端渲染页面也是有用武之地的，特别是快速地开发一些简单的应用。在模板引擎中，[Handlebars](http://handlebarsjs.com/) 和 [Pug](https://pugjs.org/api/getting-started.html) 当属其中的佼佼者。由于 Handlebars 和普通的 HTML 文档几乎完全一致，容易上手，因此这篇教程中我们选用 Handlebars，并且选用 Bootstrap 样式。\n\n与普通的 HTML 文档相比，模板最大的特点即在于提供了数据的接入。例如 handlebars，可以在双花括号 `{{}}` 之间填写任何数据，当服务器渲染页面时只需传入相应的数据即可渲染成对应的内容。除此之外，handlebars 还支持条件语法、循环语法和模板嵌套等高级功能，下面将详细描述。\n\n我们创建一个 views 目录，用于存放所有的模板代码。views 目录的结构如下所示：\n\n```\nviews\n├── image.handlebars\n├── index.handlebars\n├── layouts\n│\_\_ └── main.handlebars\n└── partials\n    ├── comments.handlebars\n    ├── popular.handlebars\n    └── stats.handlebars\n```\n\n其中 image.handlebars 和 index.handlebars 是***页面模板***，layouts/main.handlebars 则是整个网站的***布局模板***（所有页面共享），partials 目录则用于存放页面之间共享的***组件模板***，例如评论、数据等等。"
      post: >-
        大功告成！现在运行服务器，分别访问主页（[http://localhost:3000](http://localhost:3000)）和图片详情页面（[http://localhost:3000/images/test](http://localhost:3000/images/test)），可以看到完整的页面（虽然没有数据），包括所有页面共享的头部和每个页面的自定义内容。
  - name: 完善界面代码
    commit: 3b969d1
    diff:
      - file: tuture.yml
      - file: views/index.handlebars
        display: true
        explain:
          pre: 首先是在 index.handlebars 中添加上传图片的表单和展示最新图片的容器。
          post: >-
            在展示最新图片时，我们用到了 handlebars 提供的循环语法（第 46 行到 53 行）。对于传入模板的数据对象 `images`
            进行遍历，每个循环中可以访问单个 `image` 的全部属性，例如 `uniqueId` 等等。
      - file: views/image.handlebars
        display: true
        explain:
          pre: 接着完善 image.handlebars 的内容，包括展示图片的详细内容、发表评论的表单和展示所有评论的容器。
          post: 在展示所有评论的代码中，我们同样用到了 handlebars 的循环语法，非常方便。
      - file: views/partials/stats.handlebars
        display: true
        explain:
          pre: 然后，我们将分别实现网站右边栏中的统计数据、最受欢迎图片和最新评论组件。首先是统计数据组件模板：
          post: 可以看出组件模板和页面模板并没有什么不同，都是一些 HTML 代码再加上数据接口。
      - file: views/partials/popular.handlebars
        display: true
        explain:
          pre: 再分别实现最受欢迎图片组件（popular.handlebars）和最新评论组件（comments.handlebars）。
      - file: views/partials/comments.handlebars
        display: true
      - file: views/layouts/main.handlebars
        display: true
        explain:
          pre: >-
            最后，我们在布局模板 layouts/main.handlebars 中加入所有组件模板，加入模板的语法为 `{{> component
            this}}`。除此之外，由于我们用到了一些小图标，所以加上 font-awesome 的链接。
    explain:
      post: 在实际开发中，我们可能经常需要调整页面代码。在修改并保存模板后，只需刷新浏览器即可看到界面的变化（但是如果修改服务器代码则需要重新运行服务器）。
      pre: 在上面一步的基础上，我们将继续完善模板代码。
  - name: 将数据传入模板视图
    commit: eecc3e5
    diff:
      - file: controllers/home.js
        display: true
        explain:
          pre: >-
            首先在 home 控制器中构造一个 `viewModel` 对象，并在 `render` 函数中作为第二参数传入。可以看到
            `viewModel` 对象与模板中的数据接口是完全一致的。
      - file: controllers/image.js
        display: true
        explain:
          pre: 同理实现 image 控制器。
      - file: package-lock.json
      - file: package.json
        display: true
      - file: server/configure.js
        display: true
        explain:
          pre: >-
            在传入数据时，我们可以自定义一些 helper 函数在模板中使用。例如 timestamp 时间戳，`Date.now()`
            返回的是一串数字，显然用户体验很不友好，因此我们需要将其转换为方便用户阅读的时间，例如“几秒前”“两小时前”。这里我们选用
            JavaScript 最流行的处理时间的库 [moment.js](http://momentjs.cn/)，并通过 npm 安装：


            ```bash

            $ npm install moment

            ```


            然后在 server/configure.js 中配置 handlebars 的 helper 函数 `timeago`：
          post: '`timeago` 函数能够在模板中使用，将原始的 UNIX 时间戳转换为易于理解的中文时间戳。'
      - file: tuture.yml
      - file: views/image.handlebars
        display: true
        explain:
          pre: 接着在相应用到时间戳的地方加入 `timeago` 函数：
      - file: views/partials/comments.handlebars
        display: true
    explain:
      pre: 如果没有数据传入，那么模板相应的数据部分将全都是空白。在这一步中，我们将用一些假数据来演示如何从控制器将数据传入模板视图。
      post: >-
        至此，本系列教程的第一部分就已经完成了，MVC 我们实现了 V（视图）和 C （控制器）。在后续教程中，我们将接入 MongoDB
        数据库用于网站数据的存取，并进一步实现图片上传、点赞和删除，以及添加评论等功能。
  - name: 实现图片上传功能
    commit: 3b592be
    diff:
      - file: controllers/image.js
        display: true
      - file: package-lock.json
      - file: package.json
        display: true
      - file: server/routes.js
        display: true
      - file: tuture.yml
    explain:
      pre: 注意要先创建 `public/upload` 文件夹。
  - name: 接入 MongoDB 数据库
    commit: edf67b5
    diff:
      - file: .gitignore
      - file: controllers/home.js
        display: true
      - file: controllers/image.js
        display: true
      - file: models/image.js
        display: true
      - file: package-lock.json
      - file: package.json
        display: true
      - file: server.js
        display: true
      - file: tuture.yml
  - name: 实现评论功能
    commit: c6687bf
    diff:
      - file: controllers/image.js
        display: true
      - file: models/comment.js
        display: true
      - file: package-lock.json
      - file: package.json
        display: true
      - file: tuture.yml
      - file: views/image.handlebars
        display: true
  - name: 实现图片的点赞和删除
    commit: 1511fae
    diff:
      - file: controllers/image.js
        display: true
      - file: server/routes.js
        display: true
      - file: tuture.yml
      - file: views/layouts/main.handlebars
        display: true
  - name: 完善用户界面
    commit: '6231494'
    diff:
      - file: controllers/home.js
        display: true
      - file: controllers/image.js
        display: true
      - file: helpers/comments.js
        display: true
      - file: helpers/images.js
        display: true
      - file: helpers/sidebar.js
        display: true
      - file: helpers/stats.js
        display: true
      - file: package-lock.json
      - file: package.json
        display: true
      - file: tuture.yml
description: 在这篇教程中，我们将用 Node.js 中最流行的 Express 框架搭建一个类似 Instagram 的图片分享社区，数据库选用 MongoDB。
