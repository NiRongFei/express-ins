name: 从零开始用 Express + MongoDB 搭建图片分享社区
topics:
  - Express
  - MongoDB
categories:
  - 后端
  - Node.js
  - 进阶
id: 69b697ed0cd9f890a636c9c78eb2ce0c
github: 'https://github.com/mRcfps/Instagrammy'
created: '2019-10-16T00:00:00.509Z'
updated: 2019-12-12T10:54:48.995Z
splits:
  - name: 从零开始用 Express + MongoDB 搭建图片分享社区（一）
    description: >-
      Node.js 已经成为服务器端开发的主流选择之一，而 Express 则是 Node 平台最耀眼的那个框架。在这篇教程中，我们将用 Node.js
      中最流行的 Express 框架搭建一个类似 Instagram 的图片分享社区，数据库选用 当今颇受欢迎的非关系型数据库
      MongoDB。本教程的代码改编自 Mithun Satheesh，Bruno Joseph D'mello 和 Jason Krol 的《Web
      Development with MongoDB and NodeJS: Second Edition》一书。
    start: f50be54
    end: eecc3e5
    id: a0531f0
  - name: 从零开始用 Express + MongoDB 搭建图片分享社区（二）
    description: 在本系列教程的第二部分中，我们将接入 MongoDB 数据库，并由此实现围绕图片、评论的功能。
    start: 3b592be
    end: '6231494'
    id: 29f41c0
steps:
  - name: 初始化项目结构
    commit: f50be54
    diff:
      - file: .gitignore
      - file: package-lock.json
      - file: package.json
        display: true
        explain:
          pre: |-
            首先我们创建项目目录，并初始化 npm：

            ```bash
            $ mkdir Instagrammy && cd Instagrammy
            $ npm init
            ```

            添加 express 的项目依赖：

            ```bash
            $ npm install express
            ```

            最终生成的 package.json 文件如下：
      - file: server.js
        display: true
        explain:
          pre: 然后编写服务器的入口文件 `server.js`，内容如下：
      - file: tuture.yml
    explain:
      post: >-
        通过 `node server.js` 运行 server.js 文件，然后在浏览器中访问
        [http://localhost:3000](http://localhost:3000)，便可以看到服务器的返回的 Hello World：


        ![](tuture-assets/figure-1.png)
      pre: >-
        ::: primary

        此教程属于[Node.js
        后端工程师学习路线](https://tuture.co/roadmaps/node/)的一部分，点击可查看全部内容。

        :::
  - name: 配置中间件
    commit: f17c971
    diff:
      - file: package-lock.json
      - file: package.json
        display: false
      - file: server/configure.js
        display: true
        explain:
          pre: 创建 server 目录，在其中添加 configure.js 模块，用于配置所有的中间件：
          post: >-
            值得一提的是，除了上面提到的中间件，我们还用到了 express 自带的静态资源中间件
            `express.static`，用于向客户端发送图片、CSS等静态文件。最后，我们通过获取 `env`
            变量来判断是否处于开发环境，如果是的话就添加 `errorHandler` 以便于调试代码。
      - file: server.js
        display: true
        explain:
          pre: 在 server.js 中调用刚才用于配置中间件的代码：
      - file: tuture.yml
    explain:
      pre: >
        Express 本身是一个非常简洁的 web 框架，但是通过中间件这一设计模式，能够实现非常丰富的功能。一个 Express
        中间件本质上是一个函数：


        ```js

        function someMiddleware(req, res, next) {}

        ```


        `req` 参数是一个 `express.Request` 对象，封装了用户请求；`res` 参数则是一个 `express.Response`
        对象，封装了即将返回给用户的响应；`next` 则是在执行完所有逻辑后用于触发下一个中间件的函数。


        添加中间件的代码则非常简单：


        ```js

        app.use(middlewareA);

        app.use(middlewareB);

        app.use(middlewareC);

        ```


        中间件 A、B、C
        将会在处理每次请求时***按顺序执行***（这也意味着中间件的顺序是非常重要的）。接下来我们将添加以下基础中间件（也是几乎所有应用都会用到的中间件）：


        - `morgan`：用于记录日志的中间件，对于开发调试和生产监控都很有用；

        - `bodyParser`：用于解析客户端请求的中间件，包括 HTML 表单和 JSON 请求；

        - `methodOverride`：为老的浏览器提供 REST 请求的兼容性支持；

        - `cookieParser`：用于收发 cookie；

        - `errorHandler`：用于在发生错误时打印调用栈，***仅在开发时使用***；

        - `handlebars`：用于渲染用户界面的模板引擎，会在后面细讲。


        我们通过 npm 安装这些中间件：


        ```bash

        $ npm install express-handlebars body-parser cookie-parser morgan
        method-override errorhandler

        ```
  - name: 搭建路由和控制器
    commit: 5313abe
    diff:
      - file: controllers/home.js
        display: true
        explain:
          pre: 首先创建 controllers 目录，在其中创建 home.js 文件，并定义 `index` 控制器如下：
          post: >-
            每个控制器实际上都是一个 Express 中间件（只不过不需要 `next` 函数，因为是最后一个中间件）。这里我们暂时用
            `res.send` 发一条文字来代表这个 controller 已经实现。
      - file: controllers/image.js
        display: true
        explain:
          pre: 再在 controllers 目录下创建 image.js，实现与图片处理相关的控制器：
      - file: server/routes.js
        display: true
        explain:
          pre: 然后在 server 目录下创建路由模块 routes.js，建立从 URL 到控制器之间的映射：
          post: >-
            这里我们用到了 Express 自带的路由类 `Router`，可以很方便地定义路由，并且 `Router`
            本身也是一个中间件，可以直接通过 `app.use` 进行配置。
      - file: server/configure.js
        display: true
        explain:
          pre: 接着在 server/configure.js 模块中调用路由模块。
      - file: server.js
        display: true
        explain:
          pre: 最后我们去掉 server.js 中原来的首页路由。
      - file: tuture.yml
    explain:
      post: >-
        到了这一步，我们运行服务器，打开浏览器访问
        [http://localhost:3000](http://localhost:3000)，可以看到 `The home:index
        controller` 的信息；访问
        [http://localhost:3000/test123](http://localhost:3000/test123)，则是 `The
        image:index controller test123`。进一步，我们还可以通过 Postman 或者 curl 等工具测试 POST
        方法的 controller 是否可用。下面以 curl 为例测试 `POST /images`：


        ```bash

        $ curl -X POST localhost:3000/images

        The image:create POST controller

        ```


        一切顺利！到这里可以泡杯茶好好犒劳一下自己了~
      pre: >-
        现在我们已经配置好了基础的中间件，但是只有主页（URL 为 `/`）可以访问。接下来我们将实现以下路由：


        - `GET /`：网站主页

        - `GET /images/image_id`：展示单张图片

        - `POST /images`：上传图片

        - `POST /images/image_id/like`：点赞图片

        - `POST /images/image_id/comment`：评论图片


        虽然 Express 的项目结构没有固定的套路，但是我们将采用经典的 MVC 模式（即 Model View
        Controller）来搭建我们的项目。Model 定义了数据模型，View 定义了用户界面，而 Controller 则定义了相应的业务逻辑。
  - name: 配置 handlebars 模板引擎
    commit: d56de92
    diff:
      - file: views/layouts/main.handlebars
        display: true
        explain:
          pre: 首先完成布局模板 layouts/main.handlebars：
          post: >-
            main.handlebars 本身是一个完整的 HTML 文档，包括 `head` 和 `body` 部分。在 `head`
            部分，我们定义了网站的一些元数据，还加入了 Bootstrap 的 CDN 链接；在 `body`
            部分，包含两个容器：网站头部（header）和每个页面的自定义内容（即`{{{body}}}` ）。
      - file: views/index.handlebars
        display: true
        explain:
          pre: 接下来编写 index.handlebars，即主页内容。这里我们暂时先写上一个大标题：
      - file: views/image.handlebars
        display: true
        explain:
          pre: 还有 image.handlebars，即图片详情页面内容：
          post: >-
            index.handlebars 和 image.handlebars 的内容将替换布局模板中的 `{{{body}}}`
            部分。在用户访问某个页面时，页面内容 = ***布局模板+页面模板***。
      - file: controllers/home.js
        display: true
        explain:
          pre: 模板写好之后，我们修改控制器相应的代码，通过 `res.render` 函数渲染模板：
          post: '`render` 函数接受一个字符串参数，即页面模板的名称。例如 `index.handlebars` 的名称即为 `index`。'
      - file: controllers/image.js
        display: true
        explain:
          pre: 同样地，我们修改 image 控制器的代码：
      - file: server/configure.js
        display: true
        explain:
          pre: 最后，不要忘记在 server/configure.js 模块中配置 handlebars 中间件：
      - file: tuture.yml
    explain:
      pre: "这一步，我们将开始实现 MVC 中的 V，即 View，用户界面。\n\n首页的效果如下图所示：\n\n![](tuture-assets/figure-2.png)\n\n图片详情的效果如下图所示：\n\n![](tuture-assets/figure-3.png)\n\n尽管如今前后端分离已经是大势所趋，但是通过模板引擎在服务器端渲染页面也是有用武之地的，特别是快速地开发一些简单的应用。在模板引擎中，[Handlebars](http://handlebarsjs.com/) 和 [Pug](https://pugjs.org/api/getting-started.html) 当属其中的佼佼者。由于 Handlebars 和普通的 HTML 文档几乎完全一致，容易上手，因此这篇教程中我们选用 Handlebars，并且选用 Bootstrap 样式。\n\n与普通的 HTML 文档相比，模板最大的特点即在于提供了数据的接入。例如 handlebars，可以在双花括号 `{{}}` 之间填写任何数据，当服务器渲染页面时只需传入相应的数据即可渲染成对应的内容。除此之外，handlebars 还支持条件语法、循环语法和模板嵌套等高级功能，下面将详细描述。\n\n我们创建一个 views 目录，用于存放所有的模板代码。views 目录的结构如下所示：\n\n```\nviews\n├── image.handlebars\n├── index.handlebars\n├── layouts\n│\_\_ └── main.handlebars\n└── partials\n    ├── comments.handlebars\n    ├── popular.handlebars\n    └── stats.handlebars\n```\n\n其中 image.handlebars 和 index.handlebars 是***页面模板***，layouts/main.handlebars 则是整个网站的***布局模板***（所有页面共享），partials 目录则用于存放页面之间共享的***组件模板***，例如评论、数据等等。"
      post: >-
        大功告成！现在运行服务器，分别访问主页（[http://localhost:3000](http://localhost:3000)）和图片详情页面（[http://localhost:3000/images/test](http://localhost:3000/images/test)），可以看到完整的页面（虽然没有数据），包括所有页面共享的头部和每个页面的自定义内容。
  - name: 完善界面代码
    commit: 3b969d1
    diff:
      - file: tuture.yml
      - file: views/index.handlebars
        display: true
        explain:
          pre: 首先是在 index.handlebars 中添加上传图片的表单和展示最新图片的容器。
          post: >-
            在展示最新图片时，我们用到了 handlebars 提供的循环语法（第 46 行到 53 行）。对于传入模板的数据对象 `images`
            进行遍历，每个循环中可以访问单个 `image` 的全部属性，例如 `uniqueId` 等等。
      - file: views/image.handlebars
        display: true
        explain:
          pre: 接着完善 image.handlebars 的内容，包括展示图片的详细内容、发表评论的表单和展示所有评论的容器。
          post: 在展示所有评论的代码中，我们同样用到了 handlebars 的循环语法，非常方便。
      - file: views/partials/stats.handlebars
        display: true
        explain:
          pre: 然后，我们将分别实现网站右边栏中的统计数据、最受欢迎图片和最新评论组件。首先是统计数据组件模板：
          post: 可以看出组件模板和页面模板并没有什么不同，都是一些 HTML 代码再加上数据接口。
      - file: views/partials/popular.handlebars
        display: true
        explain:
          pre: 再分别实现最受欢迎图片组件（popular.handlebars）和最新评论组件（comments.handlebars）。
      - file: views/partials/comments.handlebars
        display: true
      - file: views/layouts/main.handlebars
        display: true
        explain:
          pre: >-
            最后，我们在布局模板 layouts/main.handlebars 中加入所有组件模板，加入模板的语法为 `{{> component
            this}}`。除此之外，由于我们用到了一些小图标，所以加上 font-awesome 的链接。
    explain:
      post: 在实际开发中，我们可能经常需要调整页面代码。在修改并保存模板后，只需刷新浏览器即可看到界面的变化（但是如果修改服务器代码则需要重新运行服务器）。
      pre: 在上面一步的基础上，我们将继续完善模板代码。
  - name: 将数据传入模板视图
    commit: eecc3e5
    diff:
      - file: controllers/home.js
        display: true
        explain:
          pre: >-
            首先在 home 控制器中构造一个 `viewModel` 对象，并在 `render` 函数中作为第二参数传入。可以看到
            `viewModel` 对象与模板中的数据接口是完全一致的。
      - file: controllers/image.js
        display: true
        explain:
          pre: 同理实现 image 控制器。
      - file: package-lock.json
      - file: package.json
        display: false
      - file: server/configure.js
        display: true
        explain:
          pre: >-
            在传入数据时，我们可以自定义一些 helper 函数在模板中使用。例如 timestamp 时间戳，`Date.now()`
            返回的是一串数字，显然用户体验很不友好，因此我们需要将其转换为方便用户阅读的时间，例如“几秒前”“两小时前”。这里我们选用
            JavaScript 最流行的处理时间的库 [moment.js](http://momentjs.cn/)，并通过 npm 安装：


            ```bash

            $ npm install moment

            ```


            然后在 server/configure.js 中配置 handlebars 的 helper 函数 `timeago`：
          post: '`timeago` 函数能够在模板中使用，将原始的 UNIX 时间戳转换为易于理解的中文时间戳。'
      - file: tuture.yml
      - file: views/image.handlebars
        display: true
        explain:
          pre: 接着在相应用到时间戳的地方加入 `timeago` 函数：
      - file: views/partials/comments.handlebars
        display: true
    explain:
      pre: 如果没有数据传入，那么模板相应的数据部分将全都是空白。在这一步中，我们将用一些假数据来演示如何从控制器将数据传入模板视图。
      post: >-
        至此，本系列教程的第一部分就已经完成了，MVC 我们实现了 V（视图）和 C （控制器）。在后续教程中，我们将接入 MongoDB
        数据库用于网站数据的存取，并进一步实现图片上传、点赞和删除，以及添加评论等功能。


        ::: primary

        此教程属于[Node.js
        后端工程师学习路线](https://tuture.co/roadmaps/node/)的一部分，点击可查看全部内容。

        :::
  - name: 实现图片上传功能
    commit: 3b592be
    diff:
      - file: server/routes.js
        display: true
        explain:
          pre: >-
            在 server/routes.js 模块中，我们初始化 multer 中间件，然后将其添加到上传图片的路由中（即 `POST
            /images`）：
          post: >-
            上述代码有两点需要讲解：


            - 第 6 行，在初始化 `upload` 中间件时，传入 `dest` 选项指定保存上传文件的路径，这里我们选择在
            public/upload 目录中再创建一个 temp 目录用于临时保存上传到的图片；

            - 第 14 行，`router.post` 除第一个参数为 URL，后面可以跟任意多个中间件，这里我们将上传文件的中间件添加到
            `image.create` 控制器的前面，确保先处理用户上传的文件。这里 `upload.single('file')`
            表示只处理单个上传文件，并且字段名为 `file`，在后续中间件中就可以通过 `req.file` 进行获取。


            关于 multer 的详细用法，可以参考其[文档](https://github.com/expressjs/multer)。
      - file: controllers/image.js
        display: true
        explain:
          pre: 在配置好上传文件的中间件后，相应地在控制器中加入获取并保存图片的代码：
          post: >-
            `req.file` 是一个 Multer 文件对象，包括
            `path`（上传到服务器的路径）、`filename`（服务器存储的文件名）和
            `originalname`（文件初始名，即保存在客户端的文件名）等有用的属性。我截取了一张输出 `req.file`
            所有字段的图片如下：


            ![](tuture-assets/figure-4.png)


            这里我们通过简单的后缀匹配来判断用户上传的是否为图片，如果是，则从临时目录 `tempPath` 存放到上传目录
            `targetPath` 中，否则直接删除。上传成功后，通过 `res.redirect` 将页面重定向到刚刚上传的图片的详情页面。
      - file: package-lock.json
      - file: package.json
        display: false
      - file: tuture.yml
    explain:
      pre: >-
        ::: primary

        此教程属于[Node.js
        后端工程师学习路线](https://tuture.co/roadmaps/node/)的一部分，点击可查看全部内容。

        :::


        第一步，我们先实现图片上传功能。创建 `public/upload` 文件夹，用于存放用户上传的图片：


        ```bash

        $ mkdir -p public/upload

        ```


        然后安装 multer 中间件用于处理文件上传：


        ```bash

        $ npm install multer

        ```
  - name: 接入 MongoDB 数据库
    commit: edf67b5
    diff:
      - file: models/image.js
        display: true
        explain:
          pre: >-
            我们首先实现图片有关的数据模型。创建 models 目录，在其中添加 image.js 模块，并添加实现 `ImageSchema`
            的代码：
          post: >-
            我们在第 6 行到第 13 行定义了一个 `Schema`，即数据对象的模式，描述了这个模型的所有字段及相应的属性。这里我们为
            `ImageSchema` 定义了六个字段，每个字段都有其类型（必须），`views`、`likes` 和 `timestamp`
            还有相应的默认值（可选）。除了普通字段外，我们还定义了***虚字段***`uniqueId`。虚字段（virtuals）和普通字段的最大区别是不会保存到数据库中，而是在每次查询时临时计算，通常用于对普通字段进行格式调整或组合。在
            `Schema` 定义完成后，我们将其编译为名为 `Image` 的模型并导出，方便在控制器中进行使用。
      - file: controllers/home.js
        display: true
        explain:
          pre: 接着我们在 home 控制器中调用 `ImageModel` 来从数据库中获取全部图片：
          post: >-
            在第 39 行中，我们用 `find` 方法查询图片，所有的查询方法可参考 [Mongoose
            中文文档](https://cn.mongoosedoc.top/docs/queries.html)。`find`
            是查询多条数据记录的通用方法，其四个参数如下：


            - `filter`：过滤器，是一个 JavaScript 对象，例如 `{ name: 'john' }` 则限定返回所有名字为
            john 的记录，这里我们用 `{}` 表示查询所有记录；

            - `projection`（可选）：查询所返回的字段，可以是对象或字符串，我们用 `{}` 表示返回所有字段；

            - `options`（可选）：查询操作的选项，用来指定查询操作的一些参数，比如我们用 `sort`
            选项对返回结果进行排序（这里按照发布时间 `timestamp` 进行倒序排列，即把最新发布的放在最前面）；

            - `callback`：回调函数，用于添加在查询完毕时的业务逻辑。


            MongoDB 的查询灵活而强大，但这也意味着一定的学习成本。
      - file: controllers/image.js
        display: true
        explain:
          pre: 进一步，我们在 image 控制器中添加数据库操作的代码：
          post: >-
            在 `image.index` 和 `image.create`
            两个控制器中，我们分别进行了单条数据记录的查询和插入。`findOne` 与之前的 `find`
            参数格式完全一致，只不过仅返回一条数据。在插入新数据时，先创建一个 `ImageModel` 实例，然后再调用 `save`
            方法进行保存即可。
      - file: package-lock.json
      - file: package.json
        display: false
      - file: .gitignore
      - file: server.js
        display: true
        explain:
          pre: 最后，我们需要在服务器刚刚运行时就连接好数据库，因此在 server.js 中添加如下代码：
      - file: tuture.yml
    explain:
      pre: >-
        在上一步中，我们实现了文件上传，但是有一个很糟糕的问题：我们没有去记录上传了哪些图片，还有相应的信息（例如上传时间）。当我们关闭服务器再打开时，整个网站仿佛一下子“失忆”了。解决数据持久化存储最流行的方案无疑是数据库，而
        MongoDB 凭借其优异的性能、可扩展性和灵活的数据模式，从众多数据库产品中脱颖而出。并且，MongoDB 的核心功能是基于
        BSON（Binary JSON）实现的，甚至提供了 JavaScript Shell，因此在 Node 社区更是深受欢迎。所以，我们也将利用
        MongoDB 实现 Instagrammy 的数据持久化存储。MongoDB
        可以从其[官网](https://www.mongodb.com/download-center/community)上下载。下载并安装好之后，新打开一个终端（命令控制台），运行以下命令打开数据库（Windows
        用户可以搜索 mongo.exe 并打开）：


        ```bash

        $ mongod

        ```


        然后我们安装 Mongoose 这个 npm 包：


        ```bash

        $ npm install mongoose

        ```


        Mongoose 是 MongoDB 最流行的 ODM（Object Document Mapping，对象文档映射），使用起来要比底层的
        MongoDB Node 驱动更方便。
      post: >-
        到了这一步，我们运行 `node server.js` 运行服务器（确保 MongoDB
        数据库已经在运行！），尝试上传图片，可以发现不仅能上传成功，还可以在首页看到新添加的图片了！
  - name: 实现评论功能
    commit: c6687bf
    diff:
      - file: models/comment.js
        display: true
        explain:
          pre: 首先，仿照 models/image.js，我们实现评论的数据模型：
          post: >-
            `CommentSchema` 有两个字段需要补充说明一下：


            - `image_id`：由于图片和评论是一对多的关系（即一张图片包括多个评论），因此我们需要在记录每个评论所属的图片，即通过
            `image_id` 字段进行记录；

            - `gravatar`：用 MD5 对电子邮箱加密后得到的字符串，用于访问
            [Gravatar](https://gravatar.com) 服务。Gravatar 提供了跨网站的头像服务，如果你在集成了
            Gravatar 服务的网站通过邮箱注册并上传了头像，那么别的网站也可以通过 Gravatar 访问你的头像。这里请通过 `npm
            install md5` 安装 MD5 加密的包。
      - file: views/image.handlebars
        display: true
        explain:
          pre: 我们对评论有关的界面代码进行细微的调整，将提交按钮的 `type` 从 `button` 改为 `submit`：
      - file: controllers/image.js
        display: true
        explain:
          pre: >-
            最后是评论有关的 controller 代码。包括在 `image.comment` 中实现创建评论，以及在 `image.index`
            中实现对单张图片所有评论的查询：
          post: >-
            查询与创建评论的代码和之前操作图片的代码大部分都是一致的，最大的差别在于查询时需要根据所属的图片 ID，创建时需要记录图片的
            ID。这里我们约定使用 MongoDB 为每一条数据默认创建的 `_id` 字段。
      - file: package-lock.json
      - file: package.json
        display: false
      - file: tuture.yml
    explain:
      pre: 类似地，我们进一步实现网站的评论功能。按照 MVC 模式，我们将依次实现评论的模型（M）、视图（V）和控制器（C）。
  - name: 实现图片的点赞和删除
    commit: 1511fae
    diff:
      - file: controllers/image.js
        display: true
        explain:
          pre: 首先在控制器中添加点赞和删除的代码：
          post: >-
            在两个控制器中，我们都按照***查询->修改->保存***的流程进行操作。不过在删除图片中，我们不仅先删除上传图片，再删除了此图片所有的评论模型，最后再删除数据库中的图片模型，这一切通过
            `Model.remove` 方法都可以轻松实现。`remove` 的使用方法与之前的 `find` 几乎一模一样，只不过 `find`
            会返回符合条件的结果，而 `remove` 则会直接将符合条件的记录从数据库中删除。
      - file: server/routes.js
        display: true
        explain:
          pre: 我们在路由模块 server/routes.js 中添加刚刚写好的 `image.remove` 控制器：
      - file: tuture.yml
      - file: views/layouts/main.handlebars
        display: true
        explain:
          pre: >-
            如果你尝试运行网站，你会发现点击点赞和删除按钮并没有什么用。因此，我们选用 jQuery
            来实现前端界面向服务器发起点赞和删除的请求。在布局文件中添加 jQuery 的静态链接，以及相应的 jQuery 代码（如果不熟悉
            jQuery 也不必过于纠结，直接复制粘贴就行了）：
    explain:
      pre: 这一步中，我们将实现图片的点赞和删除。
      post: 再尝试运行网站，可以看到点赞和删除功能都已经实现了！只不过侧边栏的所有数据都没有同步更新，我们将在下一步中进行完善。
  - name: 完善用户界面
    commit: '6231494'
    diff:
      - file: helpers/stats.js
        display: true
        explain:
          pre: 然后创建 helpers/stats.js，用于获取网站统计数据：
          post: >-
            这里我们用到了 `async.parallel` 接口，它接受两个参数：


            - `tasks`：一个函数数组，每个函数对应一个异步任务（所有任务将并发执行），并且接受一个回调函数用于返回任务执行的结果；

            - `callback`：整个任务组的回调函数，可以获取所有异步任务执行完成后的所有结果。


            我们将四个数据查询任务包装成四个函数作为 `async.parallel` 的第一个参数，在最后的 `callback`
            中返回所有查询结果。非常简洁、优雅。
      - file: helpers/images.js
        display: true
        explain:
          pre: 接下来实现侧边栏中的最新图片模块，一个简单的数据库查询即可：
      - file: helpers/comments.js
        display: true
        explain:
          pre: >-
            然后是创建获取最新评论的代码。不过简单地查询评论模型是不够的，我们还需要获取到每个评论对应的图片，这时候用 `async.each`
            函数对一个数组中所有对象进行异步操作最为合适不过。整个模块的代码如下：
          post: |-
            `async.each` 函数接受的三个参数如下：

            - `collection`：用于接收异步操作的集合，这里是评论集；
            - `iteratee`：异步操作函数，这里是 `attachImage` 函数；
            - `callback`：全部操作执行完成的回调函数。
      - file: helpers/sidebar.js
        display: true
        explain:
          pre: >-
            我们将前面三个 helper 函数放到一起，创建一个 sidebar 模块，并发获取三个模块的数据。这里我们还是用
            `async.parallel` 函数，因为三个模块本质上也是异步查询：
          post: 并发的异步操作层层嵌套，是不是很炫酷呢？
      - file: controllers/home.js
        display: true
        explain:
          pre: 最后将我们炫酷的 sidebar 模块用到 home 和 image 控制器中：
      - file: controllers/image.js
        display: true
      - file: package.json
        display: false
      - file: package-lock.json
      - file: tuture.yml
    explain:
      pre: >-
        终于来到教程的最后一步！我们将实现侧边栏中所有容器（统计数据、最受欢迎图片和最新评论）的数据同步。先创建 helpers
        目录，用于存放侧边栏数据获取的相关代码。然后分析一下数据同步逻辑（例如统计数据），我们发现要进行的查询非常多：图片总数、评论总数、图片所有的访问量、图片所有的点赞数。如果按照普通的写法，我们也许会这样写：


        ```javascript

        queryA(function(err, resultsA) {
          queryB(function(err, resultsB) {
            queryC(function(err, resultsC) {
              queryD(function(err, resultsD) {
                // some code ...
              }
            }
          }
        }

        ```


        这样的代码不仅十分丑陋，难以维护（即大家常说的“回调地狱”），而且性能也十分糟糕——所有查询都是链式执行。但其实所有的查询都是相互独立的，完全可以并发进行，那我们应该怎么写呢？


        答案就是 [async](http://caolan.github.io/async/) 库。async 是在 ECMAScript 6 的
        Promise 体系出现之前最流行的异步组件库，凭借其强大的性能、丰富且设计良好的接口成为 Node
        和前端开发中解决异步的最佳选择之一。这里我们也用 async 来解决并发获取数据的问题。安装 async 包：


        ```bash

        $ npm install async

        ```
      post: >-
        侧边栏的所有数据都能够同步更新，我们的网站也基本完成了！


        ::: primary

        此教程属于[Node.js
        后端工程师学习路线](https://tuture.co/roadmaps/node/)的一部分，点击可查看全部内容。

        :::
description: >-
  在这篇教程中，我们将用 Node.js 中最流行的 Express 框架搭建一个类似 Instagram 的图片分享社区，数据库选用
  MongoDB。本教程的代码改编自 Mithun Satheesh，Bruno Joseph D'mello 和 Jason Krol 的《Web
  Development with MongoDB and NodeJS: Second Edition》一书。
